<style is:global>
  /* Chatbot animations */
  @keyframes chatbot-bounce {
    0%, 100% { transform: translateY(0); }
    20% { transform: translateY(-10px); }
    40% { transform: translateY(-20px); }
    60% { transform: translateY(-10px); }
    80% { transform: translateY(-5px); }
  }
  
  /* Chatbot specific styles that need higher specificity */
  .chatbot-float-btn {
    position: fixed;
    bottom: 1.5rem;
    right: 1.5rem;
    z-index: 50;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 3.5rem;
    height: 3.5rem;
    border-radius: 9999px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
    background-color: var(--color-primary-600);
    color: white;
    animation: chatbot-bounce 1.2s 1;
  }
  
  .chatbot-badge {
    @apply absolute -top-1 -right-1 flex items-center justify-center w-5 h-5 rounded-full text-xs font-bold text-white bg-red-500 border-2 border-white;
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.1); }
    100% { transform: scale(1); }
  }
  
  .chatbot-float-btn:hover {
    @apply scale-105 shadow-xl;
    background-color: var(--color-primary-700);
  }
  
  .chatbot-window {
    @apply fixed flex flex-col rounded-xl shadow-2xl z-50 transition-all duration-300 opacity-0 translate-y-5 invisible;
    background-color: var(--color-bg-primary);
    border: 1px solid var(--color-border);
    bottom: 5.5rem;
    right: 1.5rem;
    width: 22rem;
    max-width: calc(100vw - 3rem);
    max-height: 70vh;
    min-height: 25rem;
  }
  
  .chatbot-window.active {
    @apply opacity-100 translate-y-0 visible;
  }
  
  .chatbot-header {
    @apply px-4 py-3 font-semibold flex items-center justify-between text-white rounded-t-xl;
    background-color: var(--color-primary-600);
  }
  
  .chatbot-messages {
    @apply flex-1 flex flex-col gap-3 p-4 overflow-y-auto text-sm;
    background-color: var(--color-bg-secondary);
  }
  
  .chatbot-input {
    @apply flex p-3 border-t border-solid sticky bottom-0 z-10;
    background-color: var(--color-bg-primary);
    border-color: var(--color-border);
  }
  
  .chatbot-input input {
    @apply flex-1 px-4 py-2 text-sm rounded-lg border border-solid outline-none transition-all;
    background-color: var(--color-bg-secondary);
    border-color: var(--color-border);
    color: var(--color-text-primary);
  }
  
  .chatbot-input input:focus {
    outline: none;
    border-color: var(--color-primary-500);
    box-shadow: 0 0 0 2px var(--color-primary-100);
  }
  
  [data-theme="dark"] .chatbot-input input:focus {
    box-shadow: 0 0 0 2px var(--color-primary-900);
  }
  
  .chatbot-input button {
    @apply px-4 py-2 ml-2 text-sm font-medium text-white rounded-lg whitespace-nowrap transition-all;
    background-color: var(--color-primary-600);
  }
  
  .chatbot-input button:hover {
    background-color: var(--color-primary-700);
  }
  
  .user-msg {
    @apply self-end px-4 py-2 rounded-2xl text-white text-sm shadow-sm;
    background-color: var(--color-primary-600);
    border-top-right-radius: 0;
    max-width: 85%;
  }
  
  .bot-msg {
    @apply self-start px-4 py-2 rounded-2xl text-sm shadow-sm;
    background-color: var(--color-bg-tertiary);
    color: var(--color-text-primary);
    border-top-left-radius: 0;
    max-width: 85%;
  }
  
  .suggested-questions {
    @apply flex gap-2 p-3 overflow-x-auto border-b border-solid whitespace-nowrap;
    background-color: var(--color-bg-secondary);
    border-color: var(--color-border);
    scrollbar-width: thin;
  }
  
  .suggested-questions::-webkit-scrollbar {
    @apply h-1.5;
  }
  
  .suggested-questions::-webkit-scrollbar-thumb {
    @apply bg-gray-300 rounded-full;
  }
  
  .suggested-questions button {
    @apply px-3 py-1.5 text-sm font-medium rounded-full whitespace-nowrap shrink-0 transition-all;
    background-color: var(--color-primary-100);
    color: var(--color-primary-700);
  }
  
  [data-theme="dark"] .suggested-questions button {
    background-color: var(--color-primary-600);
    color: white;
    border: 1px solid var(--color-primary-500);
  }
  
  .suggested-questions button:hover {
    @apply -translate-y-0.5;
    background-color: var(--color-primary-200);
  }
  
  [data-theme="dark"] .suggested-questions button:hover {
    background-color: var(--color-primary-700);
    border-color: var(--color-primary-400);
  }
  
  @media (max-width: 640px) {
    .chatbot-window {
      @apply right-3 bottom-20 w-[calc(100%-3.5rem)] max-w-[22rem] min-h-[20rem];
      border-radius: 1.25rem 1.25rem 0 1.25rem;
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
    }
    
    .chatbot-float-btn {
      @apply bottom-5 right-5 w-14 h-14 text-2xl;
    }
    
    .chatbot-messages {
      @apply max-h-[60vh] p-3;
    }
    
    .user-msg,
    .bot-msg {
      @apply max-w-[85%] text-sm px-3 py-2;
    }
    
    .suggested-questions {
      @apply p-2 gap-1.5;
    }
    
    .suggested-questions button {
      @apply px-2.5 py-1 text-xs;
    }
    
    .chatbot-input {
      @apply p-2;
    }
    
    .chatbot-input input {
      @apply px-3 py-1.5 text-sm;
    }
    
    .chatbot-header {
      @apply px-3 py-2 text-base;
    }
  }
</style>











</style>

<div>
  <button 
    id="chatbot-float-btn" 
    class="chatbot-float-btn" 
    aria-label="Open Chatbot"
  >
    <span class="text-2xl">ðŸ’¬</span>
    <span class="chatbot-badge" id="chatbot-badge">1</span>
  </button>
  
  <div class="chatbot-window" id="chatbot-window">
    <div class="chatbot-header">
      <span>Chat with Saurav Computers</span>
      <button 
        id="chatbot-close-btn" 
        class="bg-transparent border-none text-white text-xl hover:opacity-80 transition-opacity"
        aria-label="Close chat"
      >
        Ã—
      </button>
    </div>
    
    <div class="chatbot-messages" id="chatbot-messages">
      <div class="suggested-questions" id="chatbot-suggested">
        <button type="button" aria-label="Ask about MS-CIT">What is MS-CIT?</button>
        <button type="button" aria-label="Ask about Tally course">How to join Tally course?</button>
        <button type="button" aria-label="Ask about business hours">What are your business hours?</button>
        <button type="button" aria-label="Ask about center location">Where is your center located?</button>
        <button type="button" aria-label="Ask about SBI Kiosk Banking">What is SBI Kiosk Banking?</button>
        <button type="button" aria-label="Ask about contact information">How to contact you?</button>
      </div>
      <!-- Messages will appear here -->
    </div>
    
    <form class="chatbot-input" id="chatbot-form">
      <input 
        type="text" 
        id="chatbot-input" 
        class="w-full" 
        placeholder="Type your message..." 
        autocomplete="off" 
        required 
      />
      <button type="submit" class="hover:bg-primary-700">
        Send
      </button>
    </form>
  </div>
</div>
<audio id="chatbot-audio" src="/sound/notification.mp3"></audio>

<script is:inline>
const floatBtn = document.getElementById('chatbot-float-btn');
const windowEl = document.getElementById('chatbot-window');
const closeBtn = document.getElementById('chatbot-close-btn');
const form = document.getElementById('chatbot-form');
const input = document.getElementById('chatbot-input');
const messages = document.getElementById('chatbot-messages');
const suggested = document.getElementById('chatbot-suggested');

let chatHistory = [];
let greeted = false;
let unreadCount = 1; // Start with 1 unread message
let windowOpen = false; // Track if chat window is open

// Update badge function
function updateBadge() {
  const badge = document.getElementById('chatbot-badge');
  if (!badge) return;
  badge.textContent = unreadCount > 9 ? '9+' : unreadCount;
  badge.style.display = unreadCount > 0 ? 'flex' : 'none';
}

// Clear badge function
function clearBadge() {
  unreadCount = 0;
  updateBadge();
}

// Toggle chat window
const toggleChat = () => {
  const chatWindow = document.getElementById('chatbot-window');
  const isOpening = !chatWindow.classList.contains('active');
  
  chatWindow.classList.toggle('active');
  
  // Clear badge when opening chat
  if (isOpening) {
    clearBadge();
  }
  
  // Toggle button state
  const chatButton = document.getElementById('chatbot-float-btn');
  chatButton.style.transform = isOpening ? 'rotate(180deg)' : 'rotate(0deg)';
};

if (window.Notification && Notification.permission !== 'granted') {
  Notification.requestPermission();
}

// Show welcome message and notification 5 seconds after component loads
document.addEventListener('DOMContentLoaded', () => {
  // Initialize badge
  updateBadge();
  
  // Preload the audio
  const audio = document.getElementById('chatbot-audio');
  if (audio) {
    audio.load();
  }
  
  // Check if we've shown the welcome message in this session
  const hasGreeted = sessionStorage.getItem('chatbotGreeted') === 'true';
  const hasOpenedChat = sessionStorage.getItem('chatbotOpened') === 'true';
  
  // Only show welcome if not greeted yet or if chat was never opened
  if (!hasGreeted || !hasOpenedChat) {
    setTimeout(() => {
      // Show welcome message in chat and update badge
      showWelcome();
      unreadCount = 1; // Set unread count to 1 for the welcome message
      updateBadge();
      
      // Show browser notification if it's the first time
      if (!hasGreeted) {
        showBrowserNotification('ðŸ‘‹ Welcome to Saurav Computers! How can I help you today?');
        playNotification();
        sessionStorage.setItem('chatbotGreeted', 'true');
      }
    }, 5000);
  }
});

function showWelcome() {
  if (!greeted) {
    appendMessage('ðŸ‘‹ Welcome to Saurav Computers! How can I help you today?', 'bot', true);
    greeted = true;
  }
}

// Toggle chat window
function toggleChatWindow() {
  const isOpening = windowEl.style.display === 'none' || windowEl.style.display === '';
  
  if (isOpening) {
    windowEl.style.display = 'flex';
    windowEl.classList.add('active');
    floatBtn.style.display = 'none';
    windowOpen = true;
    clearBadge();
    // Mark chat as opened in session storage
    sessionStorage.setItem('chatbotOpened', 'true');
    // Focus input when opening
    setTimeout(() => input.focus(), 100);
  } else {
    windowEl.classList.remove('active');
    // Wait for animation to complete
    setTimeout(() => {
      windowEl.style.display = 'none';
      floatBtn.style.display = 'flex';
      windowOpen = false;
    }, 200);
  }
}

// Close when clicking outside
document.addEventListener('click', (e) => {
  if (windowOpen && !windowEl.contains(e.target) && e.target !== floatBtn) {
    toggleChatWindow();
  }
});

// Event listeners
floatBtn.addEventListener('click', (e) => {
  e.stopPropagation();
  toggleChatWindow();
});

// Prevent clicks inside the chat window from closing it
windowEl.addEventListener('click', (e) => {
  e.stopPropagation();
});

// Close button
closeBtn.onclick = (e) => {
  e.stopPropagation();
  toggleChatWindow();
};

// Handle suggested questions
document.querySelectorAll('#chatbot-suggested button').forEach(button => {
  button.onclick = (e) => {
    e.stopPropagation();
    input.value = e.target.textContent;
    form.dispatchEvent(new Event('submit', { cancelable: true }));
    e.preventDefault();
  };
});

// Function to append a message to the chat
function appendMessage(text, sender, isWelcome = false) {
  const messageDiv = document.createElement('div');
  messageDiv.className = sender === 'user' ? 'user-msg' : 'bot-msg';
  messageDiv.textContent = text;
  
  if (isWelcome) {
    messages.insertBefore(messageDiv, suggested);
  } else {
    messages.appendChild(messageDiv);
  }
  
  // Auto-scroll to bottom
  messages.scrollTop = messages.scrollHeight;
  return messageDiv;
}

// Function to handle form submission
async function handleSubmit(e) {
  e.preventDefault();
  const userMsg = input.value.trim();
  if (!userMsg) return;
  
  // Add user message to chat
  appendMessage(userMsg, 'user');
  input.value = '';
  input.disabled = true;
  
  // Add typing indicator
  const typingIndicator = appendMessage('...', 'bot');
  
  try {
    const response = await fetch('https://sv-grok-chatbot-backend.onrender.com/groq-chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'llama3-8b-8192',
        messages: [
          ...chatHistory,
          { role: 'user', content: userMsg }
        ]
      })
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data = await response.json();
    const botResponse = data.choices?.[0]?.message?.content || 'Sorry, I could not get a response.';
    
    // Update typing indicator with actual response
    typingIndicator.textContent = botResponse;
    
    // Update chat history
    chatHistory.push({ role: 'user', content: userMsg });
    chatHistory.push({ role: 'assistant', content: botResponse });
    
  } catch (err) {
    console.error('Chat error:', err);
    typingIndicator.textContent = 'Sorry, I encountered an error. Please try again.';
  } finally {
    input.disabled = false;
    input.focus();
  }
}

// Add event listeners
if (form) {
  form.addEventListener('submit', handleSubmit);
  
  // Also handle Enter key in the input field
  input.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      form.dispatchEvent(new Event('submit', { cancelable: true }));
    }
  });
}
</script>