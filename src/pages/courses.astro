---
import Layout from '../layouts/Layout.astro';
import type { Course } from '../data/courses';
import { courses } from '../data/courses';
import { mkclCourses } from '../data/mkcl-courses';
import CourseCard from '../components/courses/CourseCard.astro';
import MKCLCourseCard from '../components/courses/MKCLCourseCard.astro';

// Set up SEO
const pageTitle = 'All Courses & Programs | Saurav Computers';
const pageDescription = 'Explore our comprehensive range of courses and MKCL programs designed to enhance your skills and boost your career.';

// Define a combined course type
type CombinedCourse = {
  id: string;
  title: string;
  duration: string;
  category: string;
  description: string;
  level?: string;
  icon?: string;
  imageUrl?: string;
  isMKCL?: boolean;
  outcomes?: string[];
  syllabus?: string[];
};

// Combine all courses
const allCourses: CombinedCourse[] = [
  ...courses.map(course => ({
    ...course,
    isMKCL: false,
    icon: 'ðŸ’»',
    imageUrl: `/images/courses/${course.title.toLowerCase().replace(/\s+/g, '-')}.jpg`
  })),
  ...mkclCourses.map(course => ({
    ...course,
    isMKCL: true
  }))
];

// Get unique categories
const categories = ['All Categories', ...new Set([...courses, ...mkclCourses].map(course => course.category))];

// Default filter state
let activeCategory = 'All Categories';
let searchQuery = '';

// Handle client-side filtering
const filterScript = `
  // Tab switching
  function showTab(tabId) {
    // Hide all tab panels
    document.querySelectorAll('[role="tabpanel"]').forEach(tab => {
      tab.classList.add('hidden');
    });
    
    // Show the selected tab panel
    const activeTab = document.getElementById(tabId);
    if (activeTab) {
      activeTab.classList.remove('hidden');
    }
    
    // Update tab states
    document.querySelectorAll('[role="tab"]').forEach(tab => {
      if (tab.getAttribute('aria-controls') === tabId) {
        tab.classList.add('bg-blue-100', 'dark:bg-blue-900', 'text-blue-800', 'dark:text-blue-100');
        tab.classList.remove('text-gray-700', 'hover:bg-gray-100', 'dark:text-gray-300', 'dark:hover:bg-gray-700');
      } else {
        tab.classList.remove('bg-blue-100', 'dark:bg-blue-900', 'text-blue-800', 'dark:text-blue-100');
        tab.classList.add('text-gray-700', 'hover:bg-gray-100', 'dark:text-gray-300', 'dark:hover:bg-gray-700');
      }
    });
  }

  // Normalize search term for better matching
  function normalizeTerm(term) {
    return term
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '') // Remove special chars except spaces and hyphens
      .replace(/\s+/g, ' ')           // Replace multiple spaces with one
      .trim();
  }

  // Check if text matches search term (fuzzy matching)
  function matchesSearch(text, searchTerm) {
    if (!searchTerm) return true;
    
    const normalizedText = normalizeTerm(text);
    const normalizedSearch = normalizeTerm(searchTerm);
    
    // Split search term into words and check if all are present in text
    const searchWords = normalizedSearch.split(/\s+/);
    return searchWords.every(word => 
      normalizedText.includes(word) || 
      normalizedText.includes(word.replace(/\s+/g, '-')) ||
      normalizedText.includes(word.replace(/-/g, ' '))
    );
  }

  // Course filtering
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('searchInput') as HTMLInputElement | null;
    const searchButton = document.getElementById('searchButton');
    const searchIcon = document.getElementById('searchIcon');
    const searchLoader = document.getElementById('searchLoader');
    const courseCards = document.querySelectorAll('.course-card');
    const noResults = document.getElementById('noResults');
    let searchTimer: number | null = null;
    
    function showLoading(show) {
      if (show) {
        searchIcon.classList.add('hidden');
        searchLoader.classList.remove('hidden');
      } else {
        searchIcon.classList.remove('hidden');
        searchLoader.classList.add('hidden');
      }
    }

    function filterCourses() {
      showLoading(true);
      
      // Small delay to allow UI to update and show loading state
      setTimeout(() => {
        try {
          const searchTerm = searchInput?.value.trim().toLowerCase() || '';
          const selectedCategory = document.querySelector('.category-bubble.active')?.dataset.category || 'all';
          
          let hasResults = false;
          
          courseCards.forEach(card => {
            const title = card.dataset.title;
            const category = card.dataset.category;
            
            const matchesSearch = searchTerm === '' || matchesSearch(title, searchTerm);
            const matchesCategory = selectedCategory === 'all' || category === selectedCategory;
            
            if (matchesSearch && matchesCategory) {
              card.style.display = 'block';
              hasResults = true;
            } else {
              card.style.display = 'none';
            }
          });
          
          noResults.classList.toggle('hidden', hasResults);
        } catch (error) {
          console.error('Error filtering courses:', error);
        } finally {
          showLoading(false);
        }
      }, 100);
    }

    // Initialize tabs
    const tabs = document.querySelectorAll('[role="tab"]');
    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        const tabId = tab.getAttribute('aria-controls');
        if (tabId) {
          showTab(tabId);
        }
      });
    });

    // Initialize search
    if (searchInput && searchButton) {
      searchButton.addEventListener('click', filterCourses);
      searchInput.addEventListener('input', () => {
        if (searchTimer) {
          clearTimeout(searchTimer);
        }
        
        // Show loading state
        searchIcon.classList.add('hidden');
        searchLoader.classList.remove('hidden');
        
        searchTimer = window.setTimeout(() => {
          filterCourses();
          
          // Hide loading state
          searchIcon.classList.remove('hidden');
          searchLoader.classList.add('hidden');
        }, 300);
      });
    }

    // Initialize category bubbles
    const bubbleTabs = document.querySelectorAll('.bubble-tab');
    bubbleTabs.forEach(tab => {
      tab.addEventListener('click', () => {
        // Update active state
        bubbleTabs.forEach(t => t.classList.remove('bg-blue-100', 'dark:bg-blue-900', 'text-blue-800', 'dark:text-blue-100'));
        tab.classList.add('bg-blue-100', 'dark:bg-blue-900', 'text-blue-800', 'dark:text-blue-100');
        
        // Update active category and filter
        activeCategory = tab.getAttribute('data-category') || 'all';
        filterCourses();
      });
    });

    // Initialize first tab as active
    if (bubbleTabs.length > 0) {
      bubbleTabs[0].click();
    }
  });
`;

// Style for bubble tabs
const bubbleTabStyle = `
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .course-card {
    animation: fadeIn 0.3s ease-out forwards;
  }
  
  /* Custom scrollbar for bubble tabs */
  .overflow-x-auto::-webkit-scrollbar {
    height: 6px;
  }
  .overflow-x-auto::-webkit-scrollbar-track {
    background: transparent;
  }
  .overflow-x-auto::-webkit-scrollbar-thumb {
    background-color: rgba(156, 163, 175, 0.3);
    border-radius: 3px;
  }
  .overflow-x-auto::-webkit-scrollbar-thumb:hover {
    background-color: rgba(156, 163, 175, 0.5);
  }
`;

---

<Layout title={pageTitle} description={pageDescription}>
  <script set:html={filterScript} />
  <style set:html={bubbleTabStyle} />
  
  {/* Hero Section */}
  <div class="bg-gradient-to-r from-indigo-600 to-indigo-700 dark:from-indigo-800 dark:to-indigo-900 pt-24 pb-16">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
      <div class="max-w-4xl mx-auto text-center">
        <h1 class="text-4xl md:text-5xl font-extrabold text-white mb-4 leading-tight">
          All Courses & Programs
        </h1>
        <p class="text-xl text-indigo-100 max-w-3xl mx-auto">
          Browse through our comprehensive selection of courses and MKCL programs
        </p>
      </div>
    </div>
  </div>

  <main class="py-12 bg-gray-50 dark:bg-gray-900">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8 pt-8 pb-4">
      {/* Search Section */}
      <div class="mb-6 max-w-2xl mx-auto px-4">
        <div class="flex items-center bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-300 dark:border-gray-600 overflow-hidden">
          <input
            type="text"
            id="searchInput"
            placeholder="Search courses (e.g., ms cit, Tally, DTP)..."
            class="flex-1 py-3 px-4 bg-transparent border-0 focus:ring-0 focus:outline-none text-gray-900 dark:text-white placeholder-gray-500 text-base"
          />
          <button 
            id="searchButton"
            class="h-full px-6 bg-transparent hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-600 dark:text-gray-300 flex items-center justify-center transition-colors duration-200 relative"
          >
            <span id="searchIcon">
              <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="11" cy="11" r="8"></circle>
                <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
              </svg>
            </span>
            <span id="searchLoader" class="hidden absolute">
              <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            </span>
          </button>
        </div>
      </div>
      
      {/* Category Tabs */}
      <div class="mb-6 overflow-x-auto pb-2 -mx-2">
        <div class="flex flex-nowrap gap-2 px-2">
          <button 
            data-category="all"
            class="bubble-tab px-4 py-2 rounded-full text-sm sm:text-base whitespace-nowrap font-medium transition-all duration-200 bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-100"
            type="button"
          >
            All
          </button>
          {
            Array.from(new Set(allCourses.map(course => course.category))).map((category) => {
              const id = `category-${category.replace(/\s+/g, '-').toLowerCase()}`;
              return (
                <button 
                  data-category={category}
                  class="bubble-tab px-4 py-2 rounded-full text-sm sm:text-base whitespace-nowrap font-medium transition-all duration-200 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700"
                  type="button"
                >
                  {category}
                </button>
              );
            })
          }
        </div>
      </div>

      {/* Course Grid */}
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-7xl mx-auto px-4">
        {/* No results message */}
        <div id="noResults" class="hidden col-span-full w-full py-16 px-4">
          <div class="w-full flex flex-col items-center justify-center text-center">
            <div class="w-16 h-16 flex items-center justify-center rounded-full bg-gray-100 dark:bg-gray-800 mb-4">
              <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No courses found</h3>
            <p class="text-gray-500 dark:text-gray-400">Try adjusting your search or filter to find what you're looking for.</p>
          </div>
        </div>

        {/* Course Cards */}
        {allCourses.map(course => (
          <div 
            class="course-card bg-white dark:bg-gray-800 rounded-xl shadow-sm hover:shadow-lg transition-all duration-300 overflow-hidden border border-gray-100 dark:border-gray-700 w-full h-full flex flex-col hover:-translate-y-1"
            data-title={course.title.toLowerCase()}
            data-category={course.category}
          >
            {/* Course Image */}
            <div class="h-56 bg-gray-100 dark:bg-gray-700 overflow-hidden relative">
              <div class="absolute inset-0 bg-gradient-to-t from-black/30 to-transparent z-10"></div>
              {course.imageUrl && course.imageUrl !== 'undefined' ? (
                <img 
                  src={course.imageUrl} 
                  alt={course.title}
                  class="w-full h-full object-cover"
                  loading="lazy"
                />
              ) : (
                <div class="w-full h-full flex items-center justify-center bg-gradient-to-br from-indigo-500 to-purple-600">
                  <span class="text-4xl text-white">{course.icon || 'ðŸ“š'}</span>
                </div>
              )}
              {course.level && (
                <div class="absolute top-3 right-3 z-20">
                  <span class="inline-flex items-center px-3 py-1.5 rounded-full text-xs font-bold text-white shadow-md hover:shadow-lg transition-all duration-200 transform hover:scale-105"
                    style={{
                      backgroundColor: {
                        'Beginner': '#10B981', // Emerald
                        'Intermediate': '#3B82F6', // Blue
                        'Advanced': '#F59E0B', // Amber
                        'Expert': '#EF4444', // Red
                      }[course.level] || '#8B5CF6' // Default purple if level not matched
                    }}
                  >
                    {course.level}
                    <span class="ml-1.5 w-1.5 h-1.5 bg-white/80 rounded-full"></span>
                  </span>
                </div>
              )}
            </div>

            {/* Course Content */}
            <div class="p-6 flex-1 flex flex-col">
              <div class="mb-4">
                <h3 class="text-lg font-bold text-gray-900 dark:text-white mb-2">
                  {course.title}
                </h3>
                {course.isMKCL && (
                  <span class="inline-flex items-center mt-1 px-3 py-1.5 rounded-full text-xs font-bold text-white shadow-md hover:shadow-lg transition-all duration-200 transform hover:scale-105"
                    style={{
                      backgroundColor: '#8B5CF6' // Vibrant purple
                    }}
                  >
                    <span class="mr-1">âœ¨</span>
                    MKCL
                    <span class="ml-1.5 w-1.5 h-1.5 bg-white/80 rounded-full"></span>
                  </span>
                )}
              </div>
              
              <p class="text-sm text-gray-600 dark:text-gray-300 line-clamp-3 mb-4 flex-1">
                {course.description}
              </p>
              
              <div class="flex items-center justify-between pt-4 mt-auto border-t border-gray-100 dark:border-gray-700">
                <span class="text-sm text-gray-500 dark:text-gray-400">
                  {course.duration}
                </span>
                <a 
                  href={`/courses/${course.id}`}
                  class="inline-flex items-center text-sm font-medium text-indigo-600 hover:text-indigo-800 dark:text-indigo-400 dark:hover:text-indigo-300"
                >
                  View Details
                  <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </a>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* CTA Section */}
      <div class="mt-16 bg-indigo-700 rounded-xl overflow-hidden">
        <div class="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:py-16 lg:px-8 lg:flex lg:items-center lg:justify-between">
          <h2 class="text-3xl font-extrabold tracking-tight text-white sm:text-4xl">
            <span class="block">Ready to enhance your skills?</span>
            <span class="block text-indigo-200">Start your learning journey today.</span>
          </h2>
          <div class="mt-8 flex lg:mt-0 lg:flex-shrink-0">
            <div class="inline-flex rounded-md shadow">
              <a href="/contact" class="inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-indigo-600 bg-white hover:bg-indigo-50">
                Contact Us
              </a>
            </div>
            <div class="ml-3 inline-flex rounded-md shadow">
              <a href="tel:+919999999999" class="inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-white bg-indigo-600 bg-opacity-60 hover:bg-opacity-70">
                Call Now
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <script>
    // Global variables
    let activeCategory = 'all';
    let searchTerm = '';
    
    // Filter courses based on search and category
    function filterCourses() {
      const courseCards = document.querySelectorAll('.course-card');
      let hasVisibleCourses = false;
      
      courseCards.forEach(card => {
        const title = card.getAttribute('data-title')?.toLowerCase() || '';
        const category = card.getAttribute('data-category') || '';
        
        // Check if card matches search and category
        const matchesSearch = searchTerm === '' || title.includes(searchTerm);
        const matchesCategory = activeCategory === 'all' || category === activeCategory;
        
        if (matchesSearch && matchesCategory) {
          card.classList.remove('hidden');
          hasVisibleCourses = true;
        } else {
          card.classList.add('hidden');
        }
      });
      
      // Show/hide no results message
      const noResults = document.getElementById('noResults');
      if (noResults) {
        noResults.style.display = hasVisibleCourses ? 'none' : 'block';
      }
    }
    
    // Handle category tab clicks
    function setupCategoryTabs() {
      const tabs = document.querySelectorAll<HTMLElement>('.bubble-tab');
      
      tabs.forEach(tab => {
        tab.addEventListener('click', () => {
          // Update active tab
          tabs.forEach(t => t.classList.remove(
            'bg-blue-100', 'dark:bg-blue-900', 'text-blue-800', 'dark:text-blue-100'
          ));
          tab.classList.add('bg-blue-100', 'dark:bg-blue-900', 'text-blue-800', 'dark:text-blue-100');
          
          // Update active category and filter
          activeCategory = tab.getAttribute('data-category') || 'all';
          filterCourses();
        });
      });
      
      // Activate first tab by default
      if (tabs.length > 0) {
        const firstTab = tabs[0];
        firstTab.classList.add('bg-blue-100', 'dark:bg-blue-900', 'text-blue-800', 'dark:text-blue-100');
        activeCategory = firstTab.getAttribute('data-category') || 'all';
        filterCourses();
      }
    }
    
    // Handle search input with debounce
    function setupSearch() {
      const searchInput = document.getElementById('searchInput') as HTMLInputElement | null;
      const searchButton = document.getElementById('searchButton');
      const searchIcon = document.getElementById('searchIcon');
      const searchLoader = document.getElementById('searchLoader');
      let searchTimer: number | null = null;
      
      if (!searchInput || !searchButton || !searchIcon || !searchLoader) return;

      // Handle search input with debounce
      searchInput.addEventListener('input', () => {
        if (searchTimer !== null) {
          clearTimeout(searchTimer);
        }
        
        searchTerm = searchInput.value.trim().toLowerCase();
        
        searchTimer = window.setTimeout(() => {
          filterCourses();
          searchTimer = null;
        }, 200);
      });
      
      // Handle search button click
      searchButton.addEventListener('click', () => {
        searchTerm = searchInput.value.trim().toLowerCase();
        filterCourses();
      });
      
      // Handle Enter key in search input
      searchInput.addEventListener('keypress', (e: KeyboardEvent) => {
        if (e.key === 'Enter') {
          searchTerm = searchInput.value.trim().toLowerCase();
          filterCourses();
        }
      });
    }
    
    // Initialize everything when DOM is loaded
    if (typeof document !== 'undefined') {
      document.addEventListener('DOMContentLoaded', () => {
        setupCategoryTabs();
        setupSearch();
      });
    }
  </script>
</Layout>