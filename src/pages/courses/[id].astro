---
import Layout from '../../layouts/Layout.astro';
import CourseSidebar from '../../components/courses/CourseSidebar.astro';
import CourseSyllabus from '../../components/courses/CourseSyllabus.astro';
import CourseRequirements from '../../components/courses/CourseRequirements.astro';
import CourseFAQs from '../../components/courses/CourseFAQs.astro';
import CourseVideo from '../../components/courses/CourseVideo.astro';
import type { Course as MainCourse } from '../../data/courses';
import type { MKCLCourse } from '../../data/mkcl-courses';

// Import courses with dynamic imports to avoid type conflicts
import { courses as mainCourses } from '../../data/courses';
import { mkclCourses } from '../../data/mkcl-courses';

// Type for the combined course data
type CombinedCourse = (MainCourse | MKCLCourse) & {
  category?: string;
  level?: string;
};

// Type guard to check if a course is a MainCourse
function isMainCourse(course: CombinedCourse): course is MainCourse {
  return 'slug' in course && course.slug !== undefined;
}

// Helper function to ensure course has required fields
function ensureCourse(course: MainCourse | MKCLCourse): CombinedCourse {
  const baseCourse: CombinedCourse = {
    ...course as any, // Use type assertion to handle the spread
    category: 'category' in course ? String(course.category) : '',
    level: 'level' in course ? String(course.level) : ''
  };
  
  return baseCourse;
}

// Combine all courses from both sources
const allCourses: CombinedCourse[] = [
  ...mainCourses.map(ensureCourse),
  ...mkclCourses.map(ensureCourse)
];

// Helper function to safely get a course by ID
function getCourseById(id: string): CombinedCourse | undefined {
  return allCourses.find(course => course.id === id);
}

// Type guard to check if an object has a property
function hasProperty<T extends object, K extends string>(
  obj: T, 
  key: K
): obj is T & Record<K, unknown> {
  return key in obj;
}

// Generate static paths for all courses
export function getStaticPaths() {
  return [
    ...mainCourses.map(course => ({
      params: { id: course.id },
      props: { course }
    })),
    ...mkclCourses.map(course => ({
      params: { id: course.id },
      props: { course }
    }))
  ];
}

// Get the course ID from the URL params
const { id } = Astro.params;
if (!id) {
  return Astro.redirect('/404');
}

// Get the course by ID
const course = getCourseById(id);

// If course is not found, redirect to 404
if (!course) {
  return Astro.redirect('/404');
}

// Get related courses (excluding the current one)
const relatedCourses = allCourses
  .filter(c => {
    if (c.id === id) return false;
    
    // Only include if both courses have a category and they match
    return c.category && course.category && 
           c.category === course.category;
  })
  .slice(0, 3);

// Set up SEO
const pageTitle = `${course.title} Course | Saurav Computers`;
const pageDescription = isMainCourse(course) && 'detailedDescription' in course ? 
  (course.detailedDescription || course.description) : 
  course.description;

---

<Layout title={pageTitle} description={pageDescription}>
  {/* Hero Section */}
  <div class="bg-gradient-to-r from-indigo-600 to-indigo-700 dark:from-indigo-800 dark:to-indigo-900 pt-24 pb-16">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
      <div class="max-w-4xl mx-auto text-center">
        <span class="inline-flex items-center px-4 py-1.5 rounded-full text-xs font-semibold tracking-wider uppercase text-indigo-100 bg-indigo-500/20 mb-4">
          {course.category}
        </span>
        <h1 class="text-4xl md:text-5xl font-extrabold text-white mb-4 leading-tight">
          {course.title}
        </h1>
        <p class="text-xl text-indigo-100 max-w-3xl mx-auto">
          {course.description}
        </p>
      </div>
    </div>
  </div>

  <main class="py-12 bg-white dark:bg-gray-900">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
      {/* Breadcrumb */}
      <nav class="flex mb-8" aria-label="Breadcrumb">
        <ol class="inline-flex items-center space-x-1 md:space-x-2 rtl:space-x-reverse">
          <li class="inline-flex items-center">
            <a href="/" class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-indigo-600 dark:text-gray-400 dark:hover:text-white">
              <svg class="w-3 h-3 me-2.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                <path d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L4 11.414V18a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-6.586l.293.293a1 1 0 0 0 1.414-1.414Z"/>
              </svg>
              Home
            </a>
          </li>
          <li>
            <div class="flex items-center">
              <svg class="rtl:rotate-180 w-3 h-3 text-gray-400 mx-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
              </svg>
              <a href="/courses" class="ms-1 text-sm font-medium text-gray-700 hover:text-indigo-600 md:ms-2 dark:text-gray-400 dark:hover:text-white">Courses</a>
            </div>
          </li>
          <li aria-current="page">
            <div class="flex items-center">
              <svg class="rtl:rotate-180 w-3 h-3 text-gray-400 mx-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
              </svg>
              <span class="ms-1 text-sm font-medium text-gray-500 md:ms-2 dark:text-gray-400">{course.title}</span>
            </div>
          </li>
        </ol>
      </nav>

      <div class="grid grid-cols-1 lg:grid-cols-12 gap-8">
        {/* Main Content */}
        <div class="lg:col-span-8 space-y-8">
          {/* Course Video and Overview */}
          <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden">
            {'videoId' in course && course.videoId && (
              <CourseVideo videoId={course.videoId} title={course.title} />
            )}
            <div class="p-6 md:p-8">
              <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">
                Course Overview
              </h2>
              <div class="prose dark:prose-invert max-w-none">
                <p class="text-lg text-gray-700 dark:text-gray-300">
                  {isMainCourse(course) && 'detailedDescription' in course && course.detailedDescription ? 
                    course.detailedDescription : 
                    course.description}
                </p>
              </div>
            </div>
          </div>

          {/* Course Curriculum */}
          {course.syllabus && course.syllabus.length > 0 && (
            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden">
              <div class="p-6 md:p-8">
                <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 pb-4 border-b border-gray-100 dark:border-gray-700">
                  Course Curriculum
                </h2>
                <div class="space-y-4">
                  {course.syllabus.map((item) => (
                    <div class="flex items-start">
                      <div class="flex-shrink-0 h-6 w-6 rounded-full bg-indigo-100 dark:bg-indigo-900/30 flex items-center justify-center mt-0.5">
                        <svg class="h-3.5 w-3.5 text-indigo-600 dark:text-indigo-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7" />
                        </svg>
                      </div>
                      <p class="ml-3 text-gray-700 dark:text-gray-300">{item}</p>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* Course Outcomes */}
          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6">
            <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">What You'll Learn</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              {course.outcomes.map((outcome, index) => {
                const id = `outcome-${index}`;
                return (
                  <div id={id} class="flex items-start p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
                    <svg class="h-5 w-5 text-green-500 mt-0.5 mr-3 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    <span class="text-gray-700 dark:text-gray-300">{outcome}</span>
                  </div>
                );
              })}
            </div>
          </div>

          {/* Course Syllabus */}
          {course.syllabus && course.syllabus.length > 0 && (
            <section class="mb-12">
              <CourseSyllabus syllabus={course.syllabus} />
            </section>
          )}

          {/* Course Requirements */}
          {isMainCourse(course) && 'requirements' in course && course.requirements && course.requirements.length > 0 ? (
            <section class="mb-12">
              <CourseRequirements requirements={course.requirements} />
            </section>
          ) : null}

          {/* FAQ Section */}
          {isMainCourse(course) && 'faqs' in course && course.faqs && course.faqs.length > 0 ? (
            <section class="mb-12">
              <CourseFAQs faqs={course.faqs} />
            </section>
          ) : null}
        </div>

        {/* Sidebar */}
        <div class="lg:col-span-4 space-y-6">
          <div class="sticky top-6 space-y-6">
            {course && (
              <CourseSidebar 
                duration={course.duration}
                price={isMainCourse(course) ? course.price : undefined}
                originalPrice={isMainCourse(course) ? course.originalPrice : undefined}
                discount={isMainCourse(course) ? course.discount : undefined}
                startDate={isMainCourse(course) ? course.startDate : undefined}
                schedule={isMainCourse(course) ? course.schedule : undefined}
                instructor={isMainCourse(course) ? course.instructor : undefined}
                level={hasProperty(course, 'level') ? course.level : undefined}
                language={isMainCourse(course) ? course.language : 'English'}
                certificate={isMainCourse(course) ? course.certificate !== false : true}
                maxStudents={isMainCourse(course) ? course.maxStudents : undefined}
                enrolled={isMainCourse(course) ? course.enrolled : undefined}
                showEnrollButton={true}
              />
            )}

            {/* Related Courses */}
            {relatedCourses.length > 0 && (
              <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden">
                <div class="p-6">
                  <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-indigo-600 dark:text-indigo-400 mr-2" viewBox="0 0 20 20" fill="currentColor">
                      <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                      <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                    </svg>
                    You Might Also Like
                  </h3>
                  <div class="space-y-3">
                    {relatedCourses && relatedCourses.length > 0 && relatedCourses.map((relatedCourse) => (
                      <a 
                        href={`/courses/${relatedCourse.id}`}
                        class="group flex items-start space-x-3 p-3 -mx-3 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors"
                      >
                        <div class="flex-shrink-0 h-12 w-12 bg-indigo-50 dark:bg-indigo-900/30 rounded-lg flex items-center justify-center">
                          <span class="text-indigo-600 dark:text-indigo-400 text-lg">
                            {relatedCourse.icon === 'computer' && '💻'}
                            {relatedCourse.icon === 'keyboard' && '⌨️'}
                            {relatedCourse.icon === 'calculator' && '🧮'}
                            {relatedCourse.icon === 'academic-cap' && '🎓'}
                            {relatedCourse.icon === 'certificate' && '📜'}
                            {relatedCourse.icon === 'code' && '💻'}
                          </span>
                        </div>
                        <div class="min-w-0 flex-1">
                          <p class="text-sm font-medium text-gray-900 dark:text-white group-hover:text-indigo-600 dark:group-hover:text-indigo-400 line-clamp-2">
                            {relatedCourse.title}
                          </p>
                          <div class="flex items-center mt-1">
                            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-indigo-100 text-indigo-800 dark:bg-indigo-900/30 dark:text-indigo-300">
                              {relatedCourse.category}
                            </span>
                            <span class="ml-2 text-xs text-gray-500 dark:text-gray-400">
                              {relatedCourse.duration}
                            </span>
                          </div>
                        </div>
                      </a>
                    ))}
                  </div>
                  
                  <div class="mt-6 px-6 pb-6">
                    <a href="/courses" class="inline-flex items-center text-sm font-medium text-indigo-600 hover:text-indigo-500 dark:text-indigo-400 dark:hover:text-indigo-300">
                      Browse all courses
                      <svg class="ml-1 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                      </svg>
                    </a>
                  </div>
                </div>
              </div>
            )}
        </div>
      </div>
    </div>
  </main>
</Layout>
